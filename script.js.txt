/**
 * Attaris Communication - Main JavaScript File
 * Contains all interactive functionality for the website
 */

// Initialize cart count from localStorage if available
let cartCount = localStorage.getItem('attarisCartCount') || 0;
const updateCartCount = () => {
    document.querySelectorAll('.cart-count').forEach(el => {
        el.textContent = cartCount;
    });
    localStorage.setItem('attarisCartCount', cartCount);
};

// Initialize cart count on page load
document.addEventListener('DOMContentLoaded', () => {
    updateCartCount();
    
    // Show specific page section if URL has hash
    const hash = window.location.hash;
    if (hash && document.querySelector(hash)) {
        setTimeout(() => {
            document.querySelector(hash).scrollIntoView({ behavior: 'smooth' });
        }, 100);
    }
});

// Add to Cart Functionality
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('add-to-cart') || e.target.closest('.add-to-cart')) {
        const button = e.target.classList.contains('add-to-cart') ? e.target : e.target.closest('.add-to-cart');
        const productId = button.dataset.productId || 'default';
        
        // Get existing cart from localStorage
        let cart = JSON.parse(localStorage.getItem('attarisCart')) || {};
        
        // Add/update product in cart
        cart[productId] = (cart[productId] || 0) + 1;
        localStorage.setItem('attarisCart', JSON.stringify(cart));
        
        // Update UI
        cartCount = Object.values(cart).reduce((a, b) => a + b, 0);
        updateCartCount();
        
        // Visual feedback
        button.innerHTML = '✓ Added!';
        button.style.backgroundColor = '#2ecc71';
        
        setTimeout(() => {
            button.innerHTML = button.dataset.originalText || 'Add to Cart';
            button.style.backgroundColor = '#3498db';
        }, 1500);
        
        // Prevent default if it's a button
        if (button.tagName === 'BUTTON') {
            e.preventDefault();
        }
    }
});

// FAQ Accordion Functionality
document.querySelectorAll('.faq-item h3').forEach(question => {
    // Store original question element for accessibility
    question.setAttribute('tabindex', '0');
    question.setAttribute('role', 'button');
    question.setAttribute('aria-expanded', 'false');
    
    question.addEventListener('click', () => toggleFaq(question));
    question.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            toggleFaq(question);
        }
    });
});

function toggleFaq(question) {
    const faqItem = question.parentElement;
    const isActive = faqItem.classList.contains('active');
    
    // Close all FAQs first (for single-open behavior)
    document.querySelectorAll('.faq-item').forEach(item => {
        item.classList.remove('active');
        item.querySelector('h3').setAttribute('aria-expanded', 'false');
    });
    
    // Open current if it was closed
    if (!isActive) {
        faqItem.classList.add('active');
        question.setAttribute('aria-expanded', 'true');
    }
}

// Smooth Scrolling for Navigation Links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
        const targetId = this.getAttribute('href');
        if (targetId === '#') return;
        
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
            e.preventDefault();
            targetElement.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
            
            // Update URL without page jump
            if (history.pushState) {
                history.pushState(null, null, targetId);
            } else {
                location.hash = targetId;
            }
        }
    });
});

// Current Page Indicator for Navigation
document.querySelectorAll('nav a').forEach(link => {
    if (link.href === window.location.href) {
        link.classList.add('current-page');
        link.setAttribute('aria-current', 'page');
    }
});

// Mobile Menu Toggle (if mobile menu exists)
const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
if (mobileMenuToggle) {
    mobileMenuToggle.addEventListener('click', () => {
        document.querySelector('nav').classList.toggle('active');
        mobileMenuToggle.setAttribute('aria-expanded', 
            mobileMenuToggle.getAttribute('aria-expanded') === 'true' ? 'false' : 'true'
        );
    });
}

// Form Submission Handling
document.querySelectorAll('form').forEach(form => {
    form.addEventListener('submit', function(e) {
        const submitBtn = this.querySelector('[type="submit"]');
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.innerHTML = 'Processing...';
            
            // Simulate form submission
            setTimeout(() => {
                submitBtn.innerHTML = '✓ Submitted!';
                setTimeout(() => {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = submitBtn.dataset.originalText || 'Submit';
                }, 1500);
            }, 1000);
        }
    });
});

// Product Quantity Controls
document.querySelectorAll('.quantity-control').forEach(control => {
    const input = control.querySelector('input');
    const minus = control.querySelector('.quantity-minus');
    const plus = control.querySelector('.quantity-plus');
    
    if (minus && plus && input) {
        minus.addEventListener('click', () => {
            if (parseInt(input.value) > 1) {
                input.value = parseInt(input.value) - 1;
            }
        });
        
        plus.addEventListener('click', () => {
            input.value = parseInt(input.value) + 1;
        });
    }
});

// Initialize all tooltips
document.querySelectorAll('[data-tooltip]').forEach(el => {
    el.addEventListener('mouseenter', showTooltip);
    el.addEventListener('mouseleave', hideTooltip);
    el.addEventListener('focus', showTooltip);
    el.addEventListener('blur', hideTooltip);
});

function showTooltip(e) {
    const tooltipText = this.getAttribute('data-tooltip');
    const tooltip = document.createElement('div');
    tooltip.className = 'tooltip';
    tooltip.textContent = tooltipText;
    document.body.appendChild(tooltip);
    
    const rect = this.getBoundingClientRect();
    tooltip.style.top = `${rect.top - tooltip.offsetHeight - 10}px`;
    tooltip.style.left = `${rect.left + rect.width/2 - tooltip.offsetWidth/2}px`;
    
    this.tooltip = tooltip;
}

function hideTooltip() {
    if (this.tooltip) {
        this.tooltip.remove();
        this.tooltip = null;
    }
}

// Debounce function for resize/scroll events
function debounce(func, wait = 100) {
    let timeout;
    return function() {
        clearTimeout(timeout);
        timeout = setTimeout(func, wait);
    };
}

// Handle window resize
window.addEventListener('resize', debounce(() => {
    // Update any elements that depend on window size
}));